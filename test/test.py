# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
import math
import sys
from aiogram import MagicFilter, Router, F
from test_import import asfasfsaf, asdsad
fasgweh3erh435y4ergds = Router()
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
PI = math.pi
asdasfgasf  = 123
asdasd = 'dasfasfas'\
'asfsafsa'
asdasd = (
	"dasfasfas"
	"asfasf"
	)
asdsafas = "''"
asddasf = """adfasfasfgsa"""
# a = None
# a = int("1")
a = int('2')
print(a)
asgfasdgsdgsdgsd = 1
print(asgfasdgsdgsdgsd)
asfsafasfas=""
asddasfgasfg = {
	"safasf":1,
	"4124123412":"sdasfas",
}
asfasdgsdgsdg = [
	asfsafasfas,1,3.12
]
asd = True
asd = False
asfasfgsdagsdghsdg = 123
adsa = {
	"asdasf":"dfasdasd",
}
test = (
	"\n"
	"‚≠ê <b><u>–õ–∏—á–Ω—ã–µ –∫—É—Ä—Å—ã</u></b> ‚≠ê\n"
	"\n"
	"üîç <b><u>–ù–∞–π—Ç–∏ –∫—É—Ä—Å—ã</u></b> üîç\n"
)
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞
class MyCalculator:
	while False:
		pass
	try:
		pass
	except Exception as e:
		print(str(e))
	finally:
		pass
	
	value = 123123
	def __init__(self, value:int,test):
		print(self.value)
		self.value = value
		pass
	def square(self):
		print(self.value)
		return self.value ** 2

	def cube(self):
		print(self.value)
		return self.value ** 3

	def square_root(self):
		start = 312412
		fasfasgfa:int = 1
		return math.sqrt(self.value)
	class asdasfd():
		asdas = 1
		fasfasgfa:int = 1
		

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def greet(name):
	return f"–ü—Ä–∏–≤–µ—Ç, {name}!"

@fasgweh3erh435y4ergds.filter()
async def asfasgfsa():
	pass
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
if __name__ == "__main__":
	calculator = MyCalculator(10)
	a = MyCalculator.asdasfd().asdas
	# a.cube()
	print(f"–ö–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞: {calculator.square()}")
	print(f"–ö—É–± —á–∏—Å–ª–∞: {calculator.cube()}")
	print(f"–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å —á–∏—Å–ª–∞: {calculator.square_root()}")

	greeting = greet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
	print(greeting)
	b = 123
	asfasgfsa()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
try:
	result = 10 / 0
except ZeroDivisionError as e:
	print("–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å.")
	sys.exit(1)

class fastg43y354hterh():
	pass

